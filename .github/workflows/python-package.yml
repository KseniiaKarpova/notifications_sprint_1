name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wemake-python-styleguide flake8-html flake8 pytest mypy
        mkdir -p reports/styleguide/
        mkdir -p reports/mypy/

    - name: Lint with flake8
      run: |
        mkdir styleguide
        flake8 . --max-line-length 300 --exit-zero --format=html --htmldir=reports/styleguide/

    - name: Mypy
      run: |
          mypy --html-report reports/mypy/ . || true

    - name: Reports
      uses: actions/upload-artifact@v3
      with:
          name: code-verify-reports
          path: reports/

    - name: Notify Telegram
      if: ${{ failure() || success() }}
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        commit_hash=$(git rev-parse --short HEAD)
        if [ ${{ job.status }} == 'success' ]; then
          message="[Сервис Нотификации]: Pipeline for $commit_hash finished successfully!"
        else
          message="[Сервис Нотификации]: Pipeline for $commit_hash finished with error!"
          for step in $(echo ${{ join(join(steps.*.outcome, ','), ',') }} | tr ',' '\n'); do
            if [ $step != 'success' ]; then
              message="$message\n$step failed"
            fi
          done
        fi
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" -d chat_id="$TELEGRAM_CHAT_ID" -d text="$message"